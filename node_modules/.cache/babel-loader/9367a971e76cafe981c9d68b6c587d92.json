{"ast":null,"code":"import { types } from \"../types/types\";\nconst initialState = {\n  notes: [],\n  active: null\n};\nexport const notesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.notesActive:\n      return { ...state,\n        active: action.payload\n      };\n\n    case types.notesLoad:\n      return { ...state,\n        notes: [...action.payload]\n      };\n\n    case types.notesUpdate:\n      return { ...state,\n        notes: state.notes.map(note => note.id === action.payload.id ? action.payload.note : note)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/samba/Journal/src/reducers/notesReducer.js"],"names":["types","initialState","notes","active","notesReducer","state","action","type","notesActive","payload","notesLoad","notesUpdate","map","note","id"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAArB;AAKA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAE1D,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKP,KAAK,CAACQ,WAAX;AACI,aAAO,EACH,GAAGH,KADA;AAEHF,QAAAA,MAAM,EAAEG,MAAM,CAACG;AAFZ,OAAP;;AAMJ,SAAKT,KAAK,CAACU,SAAX;AAEI,aAAO,EACH,GAAGL,KADA;AAEHH,QAAAA,KAAK,EAAE,CAAE,GAAGI,MAAM,CAACG,OAAZ;AAFJ,OAAP;;AAKJ,SAAKT,KAAK,CAACW,WAAX;AAEA,aAAO,EACH,GAAGN,KADA;AAEHH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYU,GAAZ,CACHC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACG,OAAP,CAAeK,EAA3B,GACFR,MAAM,CAACG,OAAP,CAAeI,IADb,GAEFA,IAHH;AAFJ,OAAP;;AASA;AACI,aAAOR,KAAP;AA5BR;AA+BH,CAjCM","sourcesContent":["import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    notes: [],\r\n    active: null\r\n}\r\n\r\nexport const notesReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case types.notesActive:\r\n            return {\r\n                ...state,\r\n                active: action.payload\r\n                \r\n            }\r\n        \r\n        case types.notesLoad: \r\n\r\n            return {\r\n                ...state,\r\n                notes: [ ...action.payload ]\r\n            }    \r\n\r\n        case types.notesUpdate: \r\n\r\n        return {\r\n            ...state,\r\n            notes: state.notes.map(\r\n                note => note.id === action.payload.id\r\n                    ? action.payload.note \r\n                    : note\r\n            )\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}